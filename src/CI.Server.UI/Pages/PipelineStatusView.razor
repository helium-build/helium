@page "/projects/{id:guid}/build/{buildNum:int}"
@using Helium.Util

@implements IDisposable

@inject IProjectManager ProjectManager

@if(!hasLoaded) {
    <p>Loading status...</p>
}
else if(pipelineStatus == null) {
    <p>Could not load pipeline status.</p>
}
else {
    var projectUrl = "projects/" + Id;
    
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="">Home</a></li>
            <li class="breadcrumb-item"><a href="projects">Projects</a></li>
            <li class="breadcrumb-item"><a href="@projectUrl">@(project!.Config.Name)</a></li>
            <li class="breadcrumb-item active">Build #@BuildNum</li>
        </ol>
    </nav>
    
    <h1><StateIndicator State="@pipelineStatus.State" /> Build #@BuildNum</h1>
                                                                         
    @foreach(var (jobId, job) in pipelineStatus.JobsStatus) {
        var url = $"projects/{Id}/build/{BuildNum}/job/{jobId}";
        <div>
            <StateIndicator State="@job.State" /> <a href="@url">@jobId</a>
        </div>
    }
    
    <div class="console-output">
        @foreach(var line in lines) {
            <span>@line</span><br/>
        }
    </div>
}

@code {

    [Parameter]
    public Guid Id { get; set; }
    
    [Parameter]
    public int BuildNum { get; set; }

    private bool hasLoaded = false;
    private IProject? project;
    private IPipelineStatus? pipelineStatus;
    private GrowList<string> lines;
    

    protected override async Task OnInitializedAsync() {
        project = ProjectManager.GetProject(Id);
        if(project == null) {
            hasLoaded = true;
            return;
        }

        pipelineStatus = await project.GetPipelineStatus(BuildNum);
        if(pipelineStatus == null) {
            hasLoaded = true;
            return;
        }

        pipelineStatus.OutputLinesChanged += OutputUpdated;
        pipelineStatus.PipelineCompleted += PipelineCompleted;

        foreach(var jobStatus in pipelineStatus.JobsStatus.Values) {
            jobStatus.JobCompleted += JobCompleted;
        }
        
        var lines = await pipelineStatus.OutputLines();
        if(this.lines.Count == 0) {
            this.lines = lines;
        }
        
        hasLoaded = true;
    }


    private void OutputUpdated(object? sender, OutputLinesChangedEventArgs e) =>
        InvokeAsync(() => {
            lines = e.Lines;
            StateHasChanged();
        });

    private void PipelineCompleted(object? sender, EventArgs e) =>
        InvokeAsync(StateHasChanged);

    private void JobCompleted(object? sender, JobCompletedEventArgs e) =>
        InvokeAsync(StateHasChanged);

    public void Dispose() {
        if(pipelineStatus == null) {
            return;
        }

        pipelineStatus.OutputLinesChanged -= OutputUpdated;
        pipelineStatus.PipelineCompleted -= PipelineCompleted;
        
        foreach(var jobStatus in pipelineStatus.JobsStatus.Values) {
            jobStatus.JobCompleted -= JobCompleted;
        }
    }

}
