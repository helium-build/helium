@page "/projects/{id:guid}"

@inject IProjectManager ProjectManager

@if(project == null) {
    <p>The requested project could not be found.</p>
}
else {
    var config = project.Config;
    var editUrl = $"projects/{Id}/edit";
    var buildUrl = $"projects/{Id}/build";
    
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="">Home</a></li>
            <li class="breadcrumb-item"><a href="projects">Projects</a></li>
            <li class="breadcrumb-item active">@(config.Name)</li>
        </ol>
    </nav>
    
    <h1>Project @(config.Name)</h1>
                              
    <a href="@editUrl" class="btn btn-primary" role="button">Edit</a>
    <a href="@buildUrl" class="btn btn-primary" role="button">Build</a>

    @if(builds != null) {
        <table class="table">
            <thead>
            <tr>
                <th scope="col" class="build-status-col">Status</th>
                <th scope="col">Build</th>
            </tr>
            </thead>
            <tbody>
            @foreach(var build in builds) {
                <tr>
                    <td><StateIndicator State="@build.State" /></td>
                    <td><a href="projects/@Id/build/@build.BuildNumber">#@build.BuildNumber</a></td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {

    [Parameter]
    public Guid Id { get; set; }

    private IProject? project = null;
    private List<IPipelineStatus>? builds;

    protected override async Task OnInitializedAsync() {
        project = ProjectManager.GetProject(Id);
        if(project == null) {
            return;
        }

        builds = await project.AllPipelineStatus().ToListAsync();
    }

}
