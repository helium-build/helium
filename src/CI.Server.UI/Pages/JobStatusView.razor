@page "/projects/{id:guid}/build/{buildNum:int}/job/{jobId}"
@using Helium.Util

@inject IProjectManager ProjectManager

@if(!hasLoaded) {
    <p>Loading status...</p>
}
else if(jobStatus == null) {
    <p>Could not load pipeline status.</p>
}
else {
    var projectUrl = "projects/" + Id;
    var buildUrl = projectUrl + "/build/" + BuildNum;
    
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="">Home</a></li>
            <li class="breadcrumb-item"><a href="projects">Projects</a></li>
            <li class="breadcrumb-item"><a href="@projectUrl">@(project!.Config.Name)</a></li>
            <li class="breadcrumb-item"><a href="@buildUrl">Build #@BuildNum</a></li>
            <li class="breadcrumb-item active">@JobId</li>
        </ol>
    </nav>

    
    <h1><StateIndicator State="@jobStatus.State" /> @JobId</h1>
    
    <div class="console-output">
        @foreach(var line in lines) {
            <span>@line</span><br/>
        }
    </div>
}

@code {

    [Parameter]
    public Guid Id { get; set; }
    
    [Parameter]
    public int BuildNum { get; set; }
    
    [Parameter]
    public string? JobId { get; set; }

    private bool hasLoaded = false;
    private IProject? project;
    private IJobStatus? jobStatus;
    private GrowList<string> lines;
    

    protected override async Task OnInitializedAsync() {
        if(JobId == null) {
            hasLoaded = true;
            return;
        }
        
        project = ProjectManager.GetProject(Id);
        if(project == null) {
            hasLoaded = true;
            return;
        }

        var pipelineStatus = await project.GetPipelineStatus(BuildNum);
        if(pipelineStatus == null) {
            hasLoaded = true;
            return;
        }

        if(!pipelineStatus.JobsStatus.TryGetValue(JobId, out jobStatus)) {
            hasLoaded = true;
            return;
        }

        jobStatus.JobStarted += JobStateChanged;
        jobStatus.JobCompleted += JobStateChanged;
        jobStatus.OutputLinesChanged += OutputUpdated;
        
        var lines = await jobStatus.OutputLines();
        if(this.lines.Count == 0) {
            this.lines = lines;
        }
        
        hasLoaded = true;
    }


    private void OutputUpdated(object? sender, OutputLinesChangedEventArgs e) =>
        InvokeAsync(() => {
            lines = e.Lines;
            StateHasChanged();
        });

    private void JobStateChanged(object? sender, object e) =>
        InvokeAsync(StateHasChanged);

}
